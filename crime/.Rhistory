"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux)
aux <- data.frame(matrix(unlist(map2(pares_de_anos, "Roubo de Veículos", calcula_odds_dinamico_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Chance de transitar para presença de crime",
"Chance de transitar para ausência de crime",
"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux)
names(aux) <- c(2004:2016, "Tipo_Odds")
head(aux)
aux <- data.frame(matrix(unlist(map2(pares_de_anos, "Roubo de Veículos", calcula_odds_dinamico_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Chance de transitar para presença de crime",
"Chance de transitar para ausência de crime",
"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux) <- c(2003:2016, "Tipo_Odds")
head(aux)
min(base_crime$Ano)+1
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Tipo_Odds")
head(aux)
help(gather)
aux2 <- aux %>%
gather(Tipo_Odds, Odds, (min(base_crime$Ano)+1):(max(base_crime$Ano)))
aux2 <- aux %>%
gather(Tipo_Odds, Odds, `2003`:`2016`)
head(uax)
head(au2x)
head(aux2)
aux2 <- aux %>%
gather(Ano, Odds, `2003`:`2016`)
head(aux2)
names(aux)[1]
head(aux)
aux2 <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
head(aux2)
calcula_odds_dinamico_espaco_temporal <- function(anos_escolhidos, crime_escolhido){
anos <- anos_escolhidos
ano_inicial <-anos[1]
ano_final  <- anos[2]
crime <- crime_escolhido
df_aux_pre_inicial <- filter(base_crime, Ano == ano_inicial & Crime == crime)
df_mapa_inicial <- merge(mapa_rs, df_aux_pre_inicial, by.x = "GEOCODIG_M", by.y="CodIBGE", all.x = FALSE)
nbrsm_pre <- poly2nb(df_mapa_inicial, queen = TRUE)
valores_dummies <- data.frame(CodIBGE = df_mapa_inicial@data$GEOCODIG_M, Dummy_Crime = ifelse(df_mapa_inicial@data$Qtd > 0, 1, 0))
# Checa se houve crime nos municípios vizinhos (1 se houve algum crime na vizinhança, 0 caso contrário)
verifica_vizinhos <- function(x) {if(sum(valores_dummies[x,]$Dummy_Crime) > 0) {1} else {0}}
resultado <- unlist(map(nbrsm_pre, verifica_vizinhos))
mun_estratificados <- data.frame(CodIBGE = valores_dummies$CodIBGE, Estrato = ifelse(resultado == 1, "B", "NB"))
base_crime_estratos <- merge(base_crime, mun_estratificados, by = "CodIBGE")
# Matriz de transição NB
df_aux_pre_markov_NB <- filter(base_crime_estratos, Ano %in% anos & Crime == crime & Estrato == "NB") %>%
mutate(Dummy_Ocorrencia = ifelse(Qtd > 0, 1, 0)) %>%
select(-Qtd, -Populacao, -Estrato) %>%
spread(Ano, Dummy_Ocorrencia)
names(df_aux_pre_markov_NB)[4] <- "Inicial"
names(df_aux_pre_markov_NB)[5] <- "Final"
# Tabela Bruta
tab_bruta_NB <- table(as.factor(df_aux_pre_markov_NB$Inicial), as.factor(df_aux_pre_markov_NB$Final))
prop_NB <- prop.table(tab_bruta_NB, 1) # Probabilidades de transição (proporção marginal das linhas)
tab_final_NB <- cbind(rowSums(tab_bruta_NB),prop_NB)
# Matriz de transição B
df_aux_pre_markov_B <- filter(base_crime_estratos, Ano %in% anos & Crime == crime & Estrato == "B") %>%
mutate(Dummy_Ocorrencia = ifelse(Qtd > 0, 1, 0)) %>%
select(-Qtd, -Populacao, -Estrato) %>%
spread(Ano, Dummy_Ocorrencia)
names(df_aux_pre_markov_B)[4] <- "Inicial"
names(df_aux_pre_markov_B)[5] <- "Final"
# Tabela Bruta
tab_bruta_B <- table(as.factor(df_aux_pre_markov_B$Inicial), as.factor(df_aux_pre_markov_B$Final))
prop_B <- prop.table(tab_bruta_B, 1) # Probabilidades de transição (proporção marginal das linhas)
tab_final_B <- cbind(rowSums(tab_bruta_B),prop_B)
# Tabela Final NB + B:
miolo <- rbind(tab_final_NB, tab_final_B)
tab_final <- data.frame(Vizinhança = c("Sem crime", "Sem crime", "Com crime", "Com crime"),
Inicial = c("Sem crime", "Com crime", "Sem crime", "Com crime"),
n = miolo[,1],
`Final - Sem crime` = miolo[,2],
`Final - Com crime` = miolo[,3])
names(tab_final)[4:5] <- c("Final - Sem crime", "Final - Com crime")
miolo_odds <- miolo[,-1]
pi_B_12  <- miolo_odds[3,2]/miolo_odds[3,1]
pi_NB_12 <- miolo_odds[1,2]/miolo_odds[1,1]
pi_B_21  <- miolo_odds[4,1]/miolo_odds[4,2]
pi_NB_21 <- miolo_odds[2,1]/miolo_odds[2,2]
pi_B_11  <- miolo_odds[3,1]/miolo_odds[3,2]
pi_NB_11 <- miolo_odds[1,1]/miolo_odds[1,2]
pi_B_22  <- miolo_odds[4,2]/miolo_odds[4,1]
pi_NB_22 <- miolo_odds[2,2]/miolo_odds[2,1]
theta_12 <- pi_B_12/pi_NB_12
theta_21 <- pi_B_21/pi_NB_21
theta_11 <- pi_B_11/pi_NB_11
theta_22 <- pi_B_22/pi_NB_22
aux1 <- c("Efeito da vizinhança na transição para presença de crime", # vizinhança com crime
"Efeito da vizinhança na transição para ausência de crime",
"Efeito da vizinhança em permanecer na ausência de crime",
"Efeito da vizinhança em permanecer na presença de crime")
aux2 <- c(theta_12, theta_21, theta_11, theta_22)
tab_odds <- aux2 # data.frame(Descrição = aux1, Valor = aux2)
}
matrix(unlist(map2(pares_de_anos, "Roubo de Veículos", calcula_odds_dinamico_espaco_temporal)), ncol=length(pares_de_anos), byrow = F)
aux <- data.frame(matrix(unlist(map2(pares_de_anos, "Roubo de Veículos", calcula_odds_dinamico_espaco_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Efeito da vizinhança na transição para presença de crime", # vizinhança com crime
"Efeito da vizinhança na transição para ausência de crime",
"Efeito da vizinhança em permanecer na ausência de crime",
"Efeito da vizinhança em permanecer na presença de crime"))
head(aux)
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Tipo_Odds")
aux2 <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
head(aux2)
aux2_espaco_temp <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Variavel, Odds, "<br>",
"Ano: ", Ano)) %>%
layout(title = crime_escolhido)
crime_escolhido <- "Roubo de Veículos"
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Variavel, Odds, "<br>",
"Ano: ", Ano)) %>%
layout(title = crime_escolhido)
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds, Odds, "<br>",
"Ano: ", Ano)) %>%
layout(title = crime_escolhido)
aux <- data.frame(matrix(unlist(map2(pares_de_anos, "Roubo de Veículos", calcula_odds_dinamico_espaco_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Efeito_Vizinhanca = c("Transição para presença de crime", # vizinhança com crime
"Transição para ausência de crime",
"Permanecer na ausência de crime",
"Permanecer na presença de crime"))
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Efeito_Vizinhanca")
aux2_espaco_temp <- aux %>%
gather(Ano, Odds, -Efeito_Vizinhanca)
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Efeito_Vizinhanca,
hoverinfo="text",
text = ~paste0(Efeito_Vizinhanca, Odds, "<br>",
"Ano: ", Ano)) %>%
layout(title = crime_escolhido)
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Efeito_Vizinhanca,
hoverinfo="text",
text = ~paste0(Efeito_Vizinhanca,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = crime_escolhido)
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Efeito_Vizinhanca,
hoverinfo="text",
text = ~paste0(Efeito_Vizinhanca,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = crime_escolhido, yaxis = list(title = "Odds Espaço-Temporal"))
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Efeito_Vizinhanca,
hoverinfo="text",
text = ~paste0(Efeito_Vizinhanca,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo anual da Vizinhança no ", crime_escolhido), yaxis = list(title = "Odds Espaço-Temporal"))
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Efeito_Vizinhanca,
hoverinfo="text",
text = ~paste0(Efeito_Vizinhanca,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo anual da Vizinhança no ", crime_escolhido),
yaxis = list(title = "Odds Espaço-Temporal"),
legend = list(orientation = 'h'))
anos <- c(2002, 2016)
pares_de_anos <- list(c(2002,2003),
c(2003,2004),
c(2004,2005),
c(2005,2006),
c(2006,2007),
c(2007,2008),
c(2008,2009),
c(2009,2010),
c(2010,2011),
c(2011,2012),
c(2012,2013),
c(2013,2014),
c(2014,2015),
c(2015,2016))
calcula_odds_dinamico_temporal <- function(anos_escolhidos, crime_escolhido){
anos <- anos_escolhidos
crime <- crime_escolhido
df_aux_pre_markov <- filter(base_crime, Ano %in% anos & Crime == crime) %>%
mutate(Dummy_Ocorrencia = ifelse(Qtd > 0, 1, 0)) %>%
select(-Qtd, -Populacao) %>%
spread(Ano, Dummy_Ocorrencia)
names(df_aux_pre_markov)[4] <- "Inicial"
names(df_aux_pre_markov)[5] <- "Final"
tab_bruta <- table(as.factor(df_aux_pre_markov$Inicial), as.factor(df_aux_pre_markov$Final))
prop <- prop.table(tab_bruta, 1)# Probabilidades de transição (proporção marginal das linhas)
miolo_markov <- prop
odds_temporal <- c(miolo_markov[1,2]/miolo_markov[1,1], miolo_markov[2,1]/miolo_markov[2,2], miolo_markov[1,1]/miolo_markov[1,2], miolo_markov[2,2]/miolo_markov[2,1])
}
aux <- data.frame(matrix(unlist(map2(pares_de_anos, "Roubo de Veículos", calcula_odds_dinamico_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Chance de transitar para presença de crime",
"Chance de transitar para ausência de crime",
"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Tipo_Odds")
aux2_temp <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
head(aux2_temp)
plot_ly(aux2_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito temporal do ", crime_escolhido),
yaxis = list(title = "Odds Temporal"),
legend = list(orientation = 'h'))
plot_ly(aux2_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito temporal do ", crime_escolhido),
yaxis = list(title = "Odds Temporal")#,
#legend = list(orientation = 'h')
)
plot_ly(aux2_espaco_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Efeito_Vizinhanca,
hoverinfo="text",
text = ~paste0(Efeito_Vizinhanca,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo anual da vizinhança no ", crime_escolhido),
yaxis = list(title = "Odds Espaço-Temporal")#,
#legend = list(orientation = 'h')
)
plot_ly(aux2_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo temporal do ", crime_escolhido),
yaxis = list(title = "Odds Temporal")#,
#legend = list(orientation = 'h')
)
crime_escolhido_crimevis <- "Roubo de Veículos"
pares_de_anos <- list(c(2002,2003),
c(2003,2004),
c(2004,2005),
c(2005,2006),
c(2006,2007),
c(2007,2008),
c(2008,2009),
c(2009,2010),
c(2010,2011),
c(2011,2012),
c(2012,2013),
c(2013,2014),
c(2014,2015),
c(2015,2016))
calcula_odds_dinamico_temporal <- function(anos_escolhidos, crime_escolhido){
anos <- anos_escolhidos
crime <- crime_escolhido
df_aux_pre_markov <- filter(base_crime, Ano %in% anos & Crime == crime) %>%
mutate(Dummy_Ocorrencia = ifelse(Qtd > 0, 1, 0)) %>%
select(-Qtd, -Populacao) %>%
spread(Ano, Dummy_Ocorrencia)
names(df_aux_pre_markov)[4] <- "Inicial"
names(df_aux_pre_markov)[5] <- "Final"
tab_bruta <- table(as.factor(df_aux_pre_markov$Inicial), as.factor(df_aux_pre_markov$Final))
prop <- prop.table(tab_bruta, 1)# Probabilidades de transição (proporção marginal das linhas)
miolo_markov <- prop
odds_temporal <- c(miolo_markov[1,2]/miolo_markov[1,1], miolo_markov[2,1]/miolo_markov[2,2], miolo_markov[1,1]/miolo_markov[1,2], miolo_markov[2,2]/miolo_markov[2,1])
}
aux <- data.frame(matrix(unlist(map2(pares_de_anos, crime_escolhido_crimevis, calcula_odds_dinamico_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Chance de transitar para presença de crime",
"Chance de transitar para ausência de crime",
"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Tipo_Odds")
aux2_temp <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
plot_ly(aux2_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo temporal do ", crime_escolhido),
yaxis = list(title = "Odds Temporal")#,
#legend = list(orientation = 'h')
)
crime_escolhido_crimevis
pares_de_anos <- list(c(2002,2003),
c(2003,2004),
c(2004,2005),
c(2005,2006),
c(2006,2007),
c(2007,2008),
c(2008,2009),
c(2009,2010),
c(2010,2011),
c(2011,2012),
c(2012,2013),
c(2013,2014),
c(2014,2015),
c(2015,2016))
calcula_odds_dinamico_temporal <- function(anos_escolhidos, crime_escolhido){
anos <- anos_escolhidos
crime <- crime_escolhido
df_aux_pre_markov <- filter(base_crime, Ano %in% anos & Crime == crime) %>%
mutate(Dummy_Ocorrencia = ifelse(Qtd > 0, 1, 0)) %>%
select(-Qtd, -Populacao) %>%
spread(Ano, Dummy_Ocorrencia)
names(df_aux_pre_markov)[4] <- "Inicial"
names(df_aux_pre_markov)[5] <- "Final"
tab_bruta <- table(as.factor(df_aux_pre_markov$Inicial), as.factor(df_aux_pre_markov$Final))
prop <- prop.table(tab_bruta, 1)# Probabilidades de transição (proporção marginal das linhas)
miolo_markov <- prop
odds_temporal <- c(miolo_markov[1,2]/miolo_markov[1,1], miolo_markov[2,1]/miolo_markov[2,2], miolo_markov[1,1]/miolo_markov[1,2], miolo_markov[2,2]/miolo_markov[2,1])
}
aux <- data.frame(matrix(unlist(map2(pares_de_anos, crime_escolhido_crimevis, calcula_odds_dinamico_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Chance de transitar para presença de crime",
"Chance de transitar para ausência de crime",
"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Tipo_Odds")
aux2_temp <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
plot_ly(aux2_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo temporal do ", crime_escolhido),
yaxis = list(title = "Odds Temporal")#,
#legend = list(orientation = 'h')
)
crime_escolhido_crimevis
pares_de_anos <- list(c(2002,2003),
c(2003,2004),
c(2004,2005),
c(2005,2006),
c(2006,2007),
c(2007,2008),
c(2008,2009),
c(2009,2010),
c(2010,2011),
c(2011,2012),
c(2012,2013),
c(2013,2014),
c(2014,2015),
c(2015,2016))
calcula_odds_dinamico_temporal <- function(anos_escolhidos, crime_escolhido){
anos <- anos_escolhidos
crime <- crime_escolhido
df_aux_pre_markov <- filter(base_crime, Ano %in% anos & Crime == crime) %>%
mutate(Dummy_Ocorrencia = ifelse(Qtd > 0, 1, 0)) %>%
select(-Qtd, -Populacao) %>%
spread(Ano, Dummy_Ocorrencia)
names(df_aux_pre_markov)[4] <- "Inicial"
names(df_aux_pre_markov)[5] <- "Final"
tab_bruta <- table(as.factor(df_aux_pre_markov$Inicial), as.factor(df_aux_pre_markov$Final))
prop <- prop.table(tab_bruta, 1)# Probabilidades de transição (proporção marginal das linhas)
miolo_markov <- prop
odds_temporal <- c(miolo_markov[1,2]/miolo_markov[1,1], miolo_markov[2,1]/miolo_markov[2,2], miolo_markov[1,1]/miolo_markov[1,2], miolo_markov[2,2]/miolo_markov[2,1])
}
aux <- data.frame(matrix(unlist(map2(pares_de_anos, crime_escolhido_crimevis, calcula_odds_dinamico_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Chance de transitar para presença de crime",
"Chance de transitar para ausência de crime",
"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Tipo_Odds")
aux2_temp <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
plot_ly(aux2_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo temporal do ", crime_escolhido),
yaxis = list(title = "Odds Temporal")#,
#legend = list(orientation = 'h')
)
crime_escolhido_crimevis <- c(2002,2016)
crime_escolhido_crimevis <- "Roubo de Veículos"
crime_escolhido_crimevis <- c(2002,2016)
crime_escolhido_crimevis <- "Roubo de Veículos"
anos_escolhidos_crimevis <- c(2002,2016)
pares_de_anos <- list(c(2002,2003),
c(2003,2004),
c(2004,2005),
c(2005,2006),
c(2006,2007),
c(2007,2008),
c(2008,2009),
c(2009,2010),
c(2010,2011),
c(2011,2012),
c(2012,2013),
c(2013,2014),
c(2014,2015),
c(2015,2016))
calcula_odds_dinamico_temporal <- function(anos_escolhidos, crime_escolhido){
anos <- anos_escolhidos_crimevis
crime <- crime_escolhido_crimevis
df_aux_pre_markov <- filter(base_crime, Ano %in% anos & Crime == crime) %>%
mutate(Dummy_Ocorrencia = ifelse(Qtd > 0, 1, 0)) %>%
select(-Qtd, -Populacao) %>%
spread(Ano, Dummy_Ocorrencia)
names(df_aux_pre_markov)[4] <- "Inicial"
names(df_aux_pre_markov)[5] <- "Final"
tab_bruta <- table(as.factor(df_aux_pre_markov$Inicial), as.factor(df_aux_pre_markov$Final))
prop <- prop.table(tab_bruta, 1)# Probabilidades de transição (proporção marginal das linhas)
miolo_markov <- prop
odds_temporal <- c(miolo_markov[1,2]/miolo_markov[1,1], miolo_markov[2,1]/miolo_markov[2,2], miolo_markov[1,1]/miolo_markov[1,2], miolo_markov[2,2]/miolo_markov[2,1])
}
aux <- data.frame(matrix(unlist(map2(pares_de_anos, crime_escolhido_crimevis, calcula_odds_dinamico_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Chance de transitar para presença de crime",
"Chance de transitar para ausência de crime",
"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Tipo_Odds")
aux2_temp <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
plot_ly(aux2_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo temporal do ", crime_escolhido),
yaxis = list(title = "Odds Temporal")#,
#legend = list(orientation = 'h')
)
crime_escolhido_crimevis <- "Roubo de Veículos"
calcula_odds_dinamico_temporal <- function(anos_escolhidos, crime_escolhido){
anos <- anos_escolhidos
crime <- crime_escolhido
df_aux_pre_markov <- filter(base_crime, Ano %in% anos & Crime == crime) %>%
mutate(Dummy_Ocorrencia = ifelse(Qtd > 0, 1, 0)) %>%
select(-Qtd, -Populacao) %>%
spread(Ano, Dummy_Ocorrencia)
names(df_aux_pre_markov)[4] <- "Inicial"
names(df_aux_pre_markov)[5] <- "Final"
tab_bruta <- table(as.factor(df_aux_pre_markov$Inicial), as.factor(df_aux_pre_markov$Final))
prop <- prop.table(tab_bruta, 1)# Probabilidades de transição (proporção marginal das linhas)
miolo_markov <- prop
odds_temporal <- c(miolo_markov[1,2]/miolo_markov[1,1], miolo_markov[2,1]/miolo_markov[2,2], miolo_markov[1,1]/miolo_markov[1,2], miolo_markov[2,2]/miolo_markov[2,1])
}
pares_de_anos <- list(c(2002,2003),
c(2003,2004),
c(2004,2005),
c(2005,2006),
c(2006,2007),
c(2007,2008),
c(2008,2009),
c(2009,2010),
c(2010,2011),
c(2011,2012),
c(2012,2013),
c(2013,2014),
c(2014,2015),
c(2015,2016))
aux <- data.frame(matrix(unlist(map2(pares_de_anos, crime_escolhido_crimevis, calcula_odds_dinamico_temporal)), ncol=length(pares_de_anos), byrow = F)) %>%
mutate(Tipo_Odds = c("Chance de transitar para presença de crime",
"Chance de transitar para ausência de crime",
"Chance de permanecer sem crime",
"Chance de permanecer com crime"))
names(aux) <- c((min(base_crime$Ano)+1):(max(base_crime$Ano)), "Tipo_Odds")
aux2_temp <- aux %>%
gather(Ano, Odds, -Tipo_Odds)
plot_ly(aux2_temp, x = ~Ano, y = ~Odds,
type = 'scatter', mode = 'lines', color = ~Tipo_Odds,
hoverinfo="text",
text = ~paste0(Tipo_Odds,": ", round(Odds,2), "<br>",
"Ano: ", Ano)) %>%
layout(title = paste0("Efeito instantâneo temporal do ", crime_escolhido),
yaxis = list(title = "Odds Temporal")#,
#legend = list(orientation = 'h')
)
min(base_crime$Ano)
length(base_crime$Ano)
length(unique(base_crime$Ano))
seq_along(unique(base_crime$Ano))
lista <- list9
lista <- list()
for(i in seq_along(unique(base_crime$Ano))) {lista[[i]] <- c(min(base_crime$Ano)+i-1, min(base_crime$Ano)+i)}
lista
pares_de_anos <- list(c(2002,2003),
c(2003,2004),
c(2004,2005),
c(2005,2006),
c(2006,2007),
c(2007,2008),
c(2008,2009),
c(2009,2010),
c(2010,2011),
c(2011,2012),
c(2012,2013),
c(2013,2014),
c(2014,2015),
c(2015,2016))
pares_de_anos
pares_de_anos <- list()
for(i in seq_along(unique(base_crime$Ano))) {pares_de_anos[[i]] <- c(min(base_crime$Ano)+i-1, min(base_crime$Ano)+i)}
pares_de_anos
pares_de_anos <- list()
for(i in 1:length(unique(base_crime$Ano))) {pares_de_anos[[i]] <- c(min(base_crime$Ano)+i-1, min(base_crime$Ano)+i)}
pares_de_anos
pares_de_anos <- list()
for(i in 1:(length(unique(base_crime$Ano))-1)) {pares_de_anos[[i]] <- c(min(base_crime$Ano)+i-1, min(base_crime$Ano)+i)}
pares_de_anos
